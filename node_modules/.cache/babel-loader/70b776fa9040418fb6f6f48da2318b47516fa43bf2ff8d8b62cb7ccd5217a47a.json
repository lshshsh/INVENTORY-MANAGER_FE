{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCodePoint = readCodePoint;\nexports.readInt = readInt;\nexports.readStringContents = readStringContents;\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let containsInvalid = false;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      let escaped;\n      ({\n        ch: escaped,\n        pos,\n        lineStart,\n        curLine\n      } = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors));\n      if (escaped === null) {\n        containsInvalid = true;\n      } else {\n        out += escaped;\n      }\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    containsInvalid,\n    lineStart,\n    curLine\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\u000b\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","readCodePoint","readInt","readStringContents","_isDigit","isDigit","code","forbiddenNumericSeparatorSiblings","decBinOct","Set","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","type","input","pos","lineStart","curLine","errors","initialPos","initialLineStart","initialCurLine","out","containsInvalid","chunkStart","length","unterminated","slice","charCodeAt","isStringEnd","escaped","readEscapedChar","str","inTemplate","throwOnInvalid","res","readHexChar","String","fromCharCode","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","next","len","forceLen","n","invalidEscapeSequence","radix","allowNumSeparator","start","forbiddenSiblings","isAllowedSibling","invalid","total","i","e","Infinity","val","prev","numericSeparatorInEscapeSequence","Number","isNaN","has","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint"],"sources":["C:/Users/이수혁/AppData/Local/Microsoft/TypeScript/4.8/node_modules/@babel/helper-string-parser/lib/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCodePoint = readCodePoint;\nexports.readInt = readInt;\nexports.readStringContents = readStringContents;\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\n\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let containsInvalid = false;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n\n    const ch = input.charCodeAt(pos);\n\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      let escaped;\n      ({\n        ch: escaped,\n        pos,\n        lineStart,\n        curLine\n      } = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors));\n\n      if (escaped === null) {\n        containsInvalid = true;\n      } else {\n        out += escaped;\n      }\n\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n\n  return {\n    pos,\n    str: out,\n    containsInvalid,\n    lineStart,\n    curLine\n  };\n}\n\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n\n  return ch === (type === \"double\" ? 34 : 39);\n}\n\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n\n  const ch = input.charCodeAt(pos++);\n\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n\n    case 114:\n      return res(\"\\r\");\n\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n\n    case 116:\n      return res(\"\\t\");\n\n    case 98:\n      return res(\"\\b\");\n\n    case 118:\n      return res(\"\\u000b\");\n\n    case 102:\n      return res(\"\\f\");\n\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n\n    case 10:\n      lineStart = pos;\n      ++curLine;\n\n    case 8232:\n    case 8233:\n      return res(\"\");\n\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors));\n\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n\n  return {\n    code: n,\n    pos\n  };\n}\n\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      ++pos;\n      continue;\n    }\n\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n\n    if (val >= radix) {\n      if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n\n    ++pos;\n    total = total * radix + val;\n  }\n\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n\n  return {\n    n: total,\n    pos\n  };\n}\n\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n\n  return {\n    code,\n    pos\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}